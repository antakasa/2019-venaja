"use strict";

var helpers = require("../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");

var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _react = _interopRequireWildcard(require("react"));

  var _index = require("../helpers/index.js");

  var _index2 = require("./index.js");

  var _reactIdSwiper = _interopRequireDefault(require("react-id-swiper"));

  var _gridContext = _interopRequireDefault(require("../helpers/gridContext"));

  var _reactContextDevtool = _interopRequireDefault(require("react-context-devtool"));

  var _s = $RefreshSig$();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

  console.log(_gridContext.default);

  const SetupSwiper = ({
    data,
    index,
    updateCurrentIndex,
    storeNextSlideFunc
  }) => {
    _s();

    const [swiper, updateSwiper] = (0, _react.useState)(null);
    const [initialized, initDone] = (0, _react.useState)(false);
    const [coverImageLoaded, triggerCoverLoaded] = (0, _react.useState)(false);
    const {
      updateData
    } = (0, _react.useContext)(_gridContext.default);
    const [gridValues, updateGridvalue] = (0, _react.useState)({});
    const params = {
      getSwiper: updateSwiper,
      init: false,
      lazy: {
        loadPrevNext: true,
        loadPrevNextAmount: 2
      },
      preloadImages: false,
      effect: "none",
      direction: "vertical",
      mousewheel: {
        sensitivity: 0.2
      },
      keyboard: {
        enabled: true,
        onlyInViewport: false
      },
      speed: 0,
      noSwiping: true,
      on: {
        slideChangeTransitionEnd: () => {
          (0, _index.playAndPause)();
        }
      }
    };
    (0, _react.useEffect)(() => {
      if (swiper !== null) {
        //window.swiper = swiper;
        swiper.on("init", () => {
          _index.lazyHelpers.initialize();

          _index.lazyHelpers.loadNextPic();

          _index.lazyHelpers.loadNextPic();

          _index.lazyHelpers.loadNextPic();

          _index.lazyHelpers.loadNextVideo(); // eka video


          initDone(true);

          _index.AnalyticsMethods.registerEvent(`cover`);

          storeNextSlideFunc(() => () => goNext());

          document.body.onkeydown = function (e) {
            if (e.keyCode == 38) {// top
              //swiper.slidePrev();
            } else if (e.keyCode == 40) {// bottom
              // swiper.slideNext();
            }

            const keycodes = [49, 50, 51, 52, 53, 54, 55, 56, 57];

            if (keycodes.indexOf(e.keyCode) > -1) {
              updateGridvalue(prevState => ({ ...prevState,
                [swiper.realIndex]: keycodes.indexOf(e.keyCode)
              }));
            }
          };
        });
        swiper.init();
        swiper.on("slideChange", () => {
          const nextSlide = document.querySelector(".swiper-slide-next");

          if (nextSlide) {
            const nextSibling = nextSlide.nextSibling;
            if (!nextSibling) return;
            const nextSiblingVideo = nextSibling.querySelector("video");
            if (!nextSiblingVideo) return;
            const readyState = nextSiblingVideo.readyState;
            console.log(readyState);

            if (readyState !== 4) {
              swiper.allowSlideNext = false;

              nextSiblingVideo.oncanplay = () => {
                swiper.allowSlideNext = true;
              };
            }
          }

          _index.lazyHelpers.loadNextVideo(); // eka video


          _index.lazyHelpers.loadNextPic();

          updateCurrentIndex(swiper.realIndex);

          _index.AnalyticsMethods.registerEvent(`slide${swiper.realIndex}`);
        });
      }
    }, [swiper]);

    const goNext = () => {
      if (swiper !== null) {
        swiper.slideNext();
      }
    };

    const goPrev = () => {
      if (swiper !== null) {
        swiper.slidePrev();
      }
    };

    return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_index2.LoadingOverlay, {
      isVisible: coverImageLoaded && initialized
    }), _react.default.createElement(_gridContext.default.Provider, {
      value: {
        gridValues
      }
    }, _react.default.createElement(_reactContextDevtool.default, {
      context: _gridContext.default,
      id: "uniqContextId",
      displayName: "Context Display Name"
    }), _react.default.createElement(_reactIdSwiper.default, params, data.map((e, i) => _react.default.createElement("div", {
      key: i
    }, _react.default.createElement(_index2.Slide, {
      e: e,
      prevClickAvailable: initialized && index !== 0,
      nextClickAvailable: initialized && index !== data.length - 1,
      goNext: goNext,
      index: index,
      goPrev: goPrev,
      triggerCoverLoaded: triggerCoverLoaded,
      swiper: swiper
    }))))));
  };

  _s(SetupSwiper, "LmTcSGjXyZY3xX9ZGFWMtyiEYEQ=");

  _c = SetupSwiper;
  var _default = SetupSwiper;
  exports.default = _default;

  var _c;

  $RefreshReg$(_c, "SetupSwiper");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}