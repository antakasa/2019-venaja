"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.data = void 0;

var _processData = _interopRequireDefault(require("./helpers/processData.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var dataNotReplaced = (0, _processData.default)();
/**
 * Replaces all occurrences of needle (interpreted as a regular expression with replacement and returns the new object.
 *
 * @param entity The object on which the replacements should be applied to
 * @param needle The search phrase (as a regular expression)
 * @param replacement Replacement value
 * @param affectsKeys[optional=true] Whether keys should be replaced
 * @param affectsValues[optional=true] Whether values should be replaced
 */

Object.replaceAll = function (entity, needle, replacement, affectsKeys, affectsValues) {
  affectsKeys = typeof affectsKeys === 'undefined' ? true : affectsKeys;
  affectsValues = typeof affectsValues === 'undefined' ? true : affectsValues;
  var newEntity = {},
      regExp = new RegExp(needle, 'g');

  for (var property in entity) {
    if (!entity.hasOwnProperty(property)) {
      continue;
    }

    var value = entity[property],
        newProperty = property;

    if (affectsKeys) {
      newProperty = property.replace(regExp, replacement);
    }

    if (affectsValues) {
      if (_typeof(value) === 'object') {
        value = Object.replaceAll(value, needle, replacement, affectsKeys, affectsValues);
      } else if (typeof value === 'string') {
        value = value.replace(regExp, replacement);
      }
    }

    newEntity[newProperty] = value;
  }

  return newEntity;
};

var dataWithBuildPath = Object.values(Object.replaceAll(dataNotReplaced, '/uploads', 'https://lusi-dataviz.ylestatic.fi/2019-11-ulkolinja-venaja-update/uploads'));
console.log("normal");
var data = "normal" === 'fynd' ? dataWithBuildPath : dataNotReplaced;
exports.data = data;